학습순서

1. pom.xml

   1) 버전 최신화 하기
   
   2) ojdbc6 라이브러리 다운로드
      (1) 별도의 repository 등록
      (2) dependency 추가
      
   3) lombok dependency 추가
   
      (1) lombok 사용법
         ① STS.exe에 설치 (STS 재시작 필요)
         ② pom.xml에 dependency 추가
         ③ 각종 애너테이션 사용
        
      (2) lombok 사용 주의사항
         ① 전 과정이 순서대로 처리되어야 함.
            - 어디서 프로젝트를 가져왔는데 lombok이 사용되어 있다.
            - STS.exe에 lombok을 설치하고,
            - pom.xml에 dependency를 추가하였다.
            - 그런데 안 된다.
            - 이런 경우 기존 lombok 애너테이션을 다 지우고, 다시 추가하면 된다.
         ② STS.exe의 경로에 공백이나 한글이 포함되어 있으면 안 된다.
            - 가능 => C:\GDJ45\installer\sts-bundle\sts-3.9.18.RELEASE\STS.exe
            - 불가 => C:\아무개\installer\sts-bundle\sts-3.9.18.RELEASE\STS.exe  한글 사용 불가
            - 불가 => C:\GDJ45\install utils\sts-bundle\sts-3.9.18.RELEASE\STS.exe  공백 사용 불가
            - STS.exe에 lombok 설치 후 STS.exe를 다시 시작하면 안 켜지는 경우가 있는데 이건 대부분 위와 같은 경우
            - 이런 경우 STS.ini 파일을 메모장으로 열고 마지막 줄에 포함된 javaagent 라인 전체를 지운 뒤 
              sts-3.9.18.RELEASE 폴더에 설치된 lombok.jar 파일을 지울 것. 그리고 올바른 경로에 STS.exe를 두고 다시 설치할 것.
              
   4) JUnit 단위 테스트를 위해서 아래 dependency 추가
      (1) spring-test dependency
      (2) spring-jdbc dependency
      (3) tomcat-dbcp dependency
        

2. web.xml 에 인코딩 필터 태그 넣기
  	<!-- Encoding -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


3. webapp/resources/sql 디렉터리 생성하고,
   board.sql 작성 (실행할 수 있는 기능이 STS3에 설치되어 있지 않기 때문에 SQL DEVELOPER로 실행)


4. webapp/META-INF 디렉터리 생성하고,
   context.xml 작성
   -> tomcat 서버가 가지고 있는 context.xml에 작성할 수도 있음.


5. BoardConfig.java를 이용해서 bean 작성


6. JUnit 단위 테스트
   1) JNDI를 이용해서 DBCP을 처리하는 경우에는 DB 접속 정보가 Tomcat이 처리하는
      context.xml에 등록된다.
   2) JUnit 단위 테스트는 Tomcat 없이 동작하기 때문에 DB 접속에 문제가 발생한다.
   3) Tomcat 없이 동작하는 SpringJUnit4ClassRunner 대신에 DB 접속 정보를 넣어주는
      MySpringJUnit4ClassRunner 클래스를 만들어서 사용한다.
 