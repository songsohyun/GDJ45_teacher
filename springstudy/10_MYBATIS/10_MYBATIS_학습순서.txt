학습순서

* 개요 : MyBatis와 AOP를 이용한 트랜잭션

1. pom.xml

   1) 버전 최신화 하기
   2) ojdbc6를 다운로드 받던 repository에 오류가 발생하여 ojdbc6.jar를
      프로젝트의 build path에 등록하고 사용함.
      tomcat 폴더의 lib 폴더에 ojdbc6.jar를 복사해 두는 방법도 있음.
   3) lombok dependency 추가
   4) spring test dependency 추가 (JUnit)
   5) spring jdbc dependency 추가 (Spring JDBC)
   6) aspectJ weaver dependency 추가 (AOP)
   7) mybatis dependency 추가 (mybatis)
   8) mybatis spring dependency 추가 (mybatis)
   9) hikaricp dependency 추가 (HikariCP : 속도 빠른 커넥션 풀)

2. web.xml 에 인코딩 필터 태그 넣기
  	<!-- Encoding -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

3. webapp/resources/sql 디렉터리 생성하고,
   notice.sql 작성

4. NoticeConfig.java를 이용해서 서비스, 레파지토리 bean 작성

5. DBConfig.java를 이용해서 DB 접속 bean 작성

6. src/main/resources 패키지에 mybatis 관련 XML 배치하기
   1) mybatis-config.xml
   2) mapper.xml

7. 기존의 NoticeRepository.java(클래스)를 NoticeMapper.java(인터페이스)로 교체한다.
   NoticeConfig.java에 등록된 NoticeRepository bean도 없어진다.
   NoticeMapper.java는 인터페이스이기 때문에 bean으로 등록할 수 없다.

8. NoticeMapper.java는 notice.xml 매퍼의 쿼리문을 호출하는 수단이다.
   NoticeMapper.java notice.xml 매퍼가 가지고 있는 쿼리문의 id를 추상메소드로 가진다.
   NoticeMapper.java의 메소드를 호출하면 notice.xml에 연결된 쿼리문이 호출된다.

9. NoticeServiceImpl.java에서 사용하던 NoticeRepository를 NoticeMapper로 교체한다.

10. DBConfig.java에 @MapperScan을 추가 등록한다.