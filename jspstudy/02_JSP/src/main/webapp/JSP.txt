1. JSP
	1) Java Server Page
	2) HTML 내부에 Java 코드를 넣을 수 있다.
	3) Servlet 기반이다.
		(1) JSP를 실행하면 Servlet이 생성된다.
		(2) abc.jsp -> abc_jsp.java


2. JSP 스크립트 요소
	1) 지시어(directive)
		(1) <%@ page %>    : JSP 페이지 정보(Tomcat이 해석)
			① <%@ page language="java" %>
			② <%@ page contentType="text/html; charset=UTF-8" %>
			③ <%@ page pageEncoding="UTF-8" %>
			④ <%@ page import="java.util.Date" %>
			⑤ <%@ page session="true" %>
			⑥ <%@ page buffer="8KB" %>
			⑦ <%@ page autoFlush="true" %>
			⑧ <%@ page errorPage="error.jsp" %>
			⑨ <%@ page isErrorPage="false" %>
		(2) <%@ include %> : 다른 JSP 페이지 포함
		(3) <%@ taglib %>  : 확장 태그 사용
			① Tomcat 확장 태그를 사용할 때 작성한다.
			② Tomcat 홈페이지(tomcat.apache.org)에서 필요한 jar를 다운로드 받아서 사용한다.
	2) 선언부(declaration)
		(1) <%! void a(){} %>  : 메소드 정의
	3) 표현식(expression)
	    (1) <%= a %>    : 변수 a의 값
	    (2) <%= a+1 %>  : 연산 결과 값
	    (3) <%= a() %>  : 메소드 호출 결과 값(반환값)
	4) 스크립트릿(scriptlet)
	    <% 일반 Java 코드 %>


3. JSP 내장 객체
	1) JSP가 미리 생성해 놓은 객체(인스턴스)이다.
	2) 종류 9가지
		(1) request     요청
		(2) response    응답
		(3) out         출력 스트림
		(4) page        페이지
		(5) config      환경 설정
		(6) exception   예외 처리
		(7) pageContext 페이지 저장소
		(8) session     세션
		(9) application 애플리케이션


4. 다른 페이지(header.jsp, footer.jsp) 포함하기
	1) include 지시어
		(1) 정적 페이지(변수에 의해 변하는 부분이 없는 페이지)를 포함할 때 사용한다.
		(2) 주로 footer 영역을 포함할 때 사용한다.
		(3) <%@ include file="footer.jsp" %>
	2) include 액션태그
		(1) 동적 페이지(변수에 의해 변하는 부분이 있는 페이지)를 포함할 때 사용한다.
		(2) 주로 header 영역을 포함할 때 사용한다.
		(3) 포함할 페이지에 parameter를 전달할 수 있다.
			<jsp:include page="header.jsp">
				<jsp:param value="값" name="파라미터" />
			</jsp:include>


5. JSP 저장 영역
	1) 데이터를 속성(Attribute)으로 저장할 수 있는 영역이다.
	2) 저장된 데이터는 EL(Expression Language, 표현 언어)을 사용할 수 있다.
	3) 저장 영역 4개
		(1) pageContext
			① 해당 페이지에서만 사용
			② 해당 페이지를 벗어나면 소멸
		(2) request
			① 요청에서만 사용
			② 응답되면 소멸(요청이 끝나면 소멸)
		(3) session
			① 웹 브라우저에서 사용
			② 웹 브라우저를 닫으면 소멸
		(4) application
			① 애플리케이션에서 사용(프로젝트 단위)
			② 애플리케이션을 닫으면 소멸
	4) 속성(Attribute) 값 저장하기
		(1) pageContext.setAttribute(속성명, 값)
		(2) request.setAttribute(속성명, 값)
		(3) session.setAttribute(속성명, 값)
		(4) application.setAttribute(속성명, 값)
		(5) 모든 속성 값의 타입은 Object이다.
		    모든 타입의 값을 저장할 수 있지만, 꺼낼 때는 캐스팅이 필요하다.
	5) 속성(Attribute) 값 알아내기
		(1) pageContext.getAttribute(속성명)
		(2) request.getAttribute(속성명)
		(3) session.getAttribute(속성명)
		(4) application.getAttribute(속성명)
	6) 속성(Attribute) 값 삭제하기
		(1) pageContext.removeAttribute(속성명)
		(2) request.removeAttribute(속성명)
		(3) session.removeAttribute(속성명)
		(4) application.removeAttribute(속성명)
		

6. EL
	1) Expression Language
	2) JSP 스크립트 언어이다.
	3) JSP 표현식을 EL로 대체할 수 있다.
	4) JSP 표현식  ->  EL
	   <%=값%>         ${값}
	5) JSP 저장 영역 4개 중 한 영역에 저장되어 있어야 EL을 사용할 수 있다.
	6) 우선 순위가 있다.(같은 이름으로 여러 곳에 저장된 경우 높은 우선 순위를 가진 영역의 값을 사용한다.)
	   높음                                     낮음
	   pageContext > request > session > application
	7) 4개 영역의 스코프 키워드
		(1) pageContext : pageScope
		(2) request     : requestScope
		(3) session     : sessionScope
		(4) application : applicationScope
	8) pageContext에서 속성(Attribute) 사용하기
		(1) 속성으로 값 저장하기
			pageContext.setAttribute("name", "민경태")
		(2) 속성 값 알아내기
			① pageContext.getAttribute("name")
			② ${name}
			③ ${pageScope.name}
	9) request에서 속성(Attribute) 사용하기
		(1) 속성으로 값 저장하기
			request.setAttribute("name", "민경태")
		(2) 속성 값 알아내기
			① request.getAttribute("name")
			② ${name}
			③ ${requestScope.name}
	10) session에서 속성(Attribute) 사용하기
		(1) 속성으로 값 저장하기
			session.setAttribute("name", "민경태")
		(2) 속성 값 알아내기
			① session.getAttribute("name")
			② ${name}
			③ ${sessionScope.name}
	11) application에서 속성(Attribute) 사용하기
		(1) 속성으로 값 저장하기
			application.setAttribute("name", "민경태")
		(2) 속성 값 알아내기
			① application.getAttribute("name")
			② ${name}
			③ ${applicationScope.name}

7. session
	1) HttpSession 타입의 JSP 내장 객체이다.
	2) HttpSession session 인스턴스를 매개 변수로 선언하거나,
	   request로부터 session을 알아낼 수 있다.
	3) 서버 측 공간으로 보안을 유지할 수 있다.
	4) session에 저장된 정보는 웹 브라우저가 켜져 있는 동안 유지된다.
	5) session의 속성(Attribute) 사용 방법
		(1) 저장 : session.setAttribute(속성명, 값)
		(2) 확인 : session.getAttribute(속성명), ${속성명}
		(3) 삭제 : session.removeAttribute(속성명)
	6) session 초기화
		session.invalidate()
	

8. cookie
	1) Cookie 클래스 타입이다.
	2) 서버가 클라이언트에 데이터를 저장해 두는 장소이다.
	3) 클라이언트의 웹 브라우저에 저장하는데 웹 브라우저가 닫혀도 정보가 유지된다.
	4) 쿠키 저장
		response.addCookie(new Cookie(쿠키명, 값))
	5) 쿠키 확인
		Cookie[] cookies = request.getCookies()
	
	
9. 파일 업로드
	1) http://servlets.com/ 사이트에서 cos.jar 라이브러리를 다운로드 받는다.
	2) 프로젝트에 cos.jar 라이브러리를 등록한다.
	3) 서버 내 경로에 파일을 업로드 해 두는 경우 src/main/webapp 디렉터리에 하위 디렉터리를 만든다.
	4) 반드시 다음 형식의 <form> 태그를 사용한다.
		<form method="post" enctype="multipart/form-data">
			<input type="file">
		</form>
	5) 파일 첨부 요청은 HttpServletRequest request가 처리하지 않는다.
	   MultipartRequest request를 사용해야 한다.
	   
	   
10. 파일 다운로드
    1) 서버의 파일을 클라이언트로 복사하는 과정이다.(파일 복사 과정과 동일)
    2) 다운로드 처리를 위한 응답 헤더(response header)가 있다.
        (1) Content-Disposition
        (2) Content-Type
        (3) Content-Length
    3) 다운로드 할 파일을 InputStream으로 읽은 뒤,
       이를 그대로 응답(response)의 OutputStream으로 보낸다.
