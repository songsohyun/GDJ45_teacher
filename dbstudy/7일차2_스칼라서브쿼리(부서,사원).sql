-- 테이블 삭제
DROP TABLE EMPLOYEE;
DROP TABLE DEPARTMENT;

-- DEPARTMENT 테이블 생성
CREATE TABLE DEPARTMENT(
    DEPT_NO   NUMBER NOT NULL,
    DEPT_NAME VARCHAR2(15 BYTE) NOT NULL,
    LOCATION  VARCHAR2(15 BYTE) NOT NULL
);

-- 기본키
ALTER TABLE DEPARTMENT ADD CONSTRAINT DEPARTMENT_PK PRIMARY KEY(DEPT_NO);

-- EMPLOYEE 테이블 생성
CREATE TABLE EMPLOYEE(
    EMP_NO    NUMBER NOT NULL,
    NAME      VARCHAR2(20 BYTE) NOT NULL,
    DEPART    NUMBER,
    POSITION  VARCHAR2(20 BYTE),
    GENDER    CHAR(2),
    HIRE_DATE DATE,
    SALARY    NUMBER
);

-- 기본키
ALTER TABLE EMPLOYEE ADD CONSTRAINT EMPLOYEE_PK PRIMARY KEY(EMP_NO);

-- 외래키
ALTER TABLE EMPLOYEE 
    ADD CONSTRAINT EMPLOYEE_DEPARTMENT_FK FOREIGN KEY(DEPART) 
        REFERENCES DEPARTMENT(DEPT_NO);

-- 데이터 삽입
INSERT INTO DEPARTMENT VALUES(1, '영업부', '대구');
INSERT INTO DEPARTMENT VALUES(2, '인사부', '서울');
INSERT INTO DEPARTMENT VALUES(3, '총무부', '대구');
INSERT INTO DEPARTMENT VALUES(4, '기획부', '서울');

INSERT INTO EMPLOYEE(EMP_NO, NAME, DEPART, POSITION, GENDER, HIRE_DATE, SALARY)
VALUES (1001, '구창민', 1, '과장', 'M', '95-05-01', 5000000);
INSERT INTO EMPLOYEE(EMP_NO, NAME, DEPART, POSITION, GENDER, HIRE_DATE, SALARY)
VALUES (1002, '김민서', 1, '사원', 'M', '17-09-01', 2500000);
INSERT INTO EMPLOYEE(EMP_NO, NAME, DEPART, POSITION, GENDER, HIRE_DATE, SALARY)
VALUES (1003, '이은영', 2, '부장', 'F', '90-09-01', 5500000);
INSERT INTO EMPLOYEE(EMP_NO, NAME, DEPART, POSITION, GENDER, HIRE_DATE, SALARY)
VALUES (1004, '한성일', 2, '과장', 'M', '93-04-01', 5000000);

COMMIT;


-- 스칼라 서브쿼리(SCALA SUBQUERY)
-- 1. SELECT절에서 사용되는 서브쿼리이다.
-- 2. 스칼라 서브쿼리는 단일 행 서브쿼리만 가능하다.


-- 1. 전체 사원의 인원수, 급여합, 급여평균, 최대급여, 최소급여를 조회하시오.
--    1) 일반 풀이
SELECT
       COUNT(*)
     , SUM(SALARY)
     , AVG(SALARY)
     , MAX(SALARY)
     , MIN(SALARY)
  FROM
       EMPLOYEE;

--    2) 스칼라 서브쿼리 풀이
SELECT
       (SELECT COUNT(*) FROM EMPLOYEE)
     , (SELECT SUM(SALARY) FROM EMPLOYEE)
     , (SELECT AVG(SALARY) FROM EMPLOYEE)
     , (SELECT MAX(SALARY) FROM EMPLOYEE)
     , (SELECT MIN(SALARY) FROM EMPLOYEE)
  FROM
       DUAL;


-- 2. 부서번호(DEPT_NO)가 1인 부서와 같은 지역(LOCATION)에서 근무하는 사원들을 조회하시오.
--    사원번호(EMP_NO), 사원명(NAME), 부서명(DEPT_NAME)을 조회하시오.


--    1) 일반 풀이
--       조인을 이용하시오.
--       스칼라 서브쿼리는 일치하지 않는 데이터를 NULL 처리한다.
--       같은 방식의 조인은 '외부조인'이다.
SELECT E.EMP_NO, E.NAME, D.DEPT_NAME
  FROM DEPARTMENT D RIGHT OUTER JOIN EMPLOYEE E
    ON D.DEPT_NO = E.DEPART
 WHERE D.LOCATION = (SELECT LOCATION
                       FROM DEPARTMENT
                      WHERE DEPT_NO = 1);

--    2) 스칼라 서브쿼리 풀이
SELECT E.EMP_NO, E.NAME, (SELECT D.DEPT_NAME FROM DEPARTMENT D WHERE D.DEPT_NO = E.DEPART AND D.DEPT_NO = 1)
  FROM EMPLOYEE E;
